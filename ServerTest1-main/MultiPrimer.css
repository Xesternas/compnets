#define _WINSOCK_DEPRECATED_NO_WARNINGS  
#include <iostream>
#include <winsock2.h>
#include <string>
#pragma comment(lib, "Ws2_32.lib")
using namespace std;
u_short MY_PORT = 666;
#define PRINTNUSERS if (nclients) cout << "user on-line" << nclients << endl; else cout << "NO User on-line\n";



DWORD WINAPI ConToClient(LPVOID client_socket);

int nclients = 0;

int main() {
	char buff[1024];
	cout << "TCP ECHO-SERVER \n";
	if (WSAStartup(0x0202, (WSADATA*)&buff[0])) {
		cout << "Error WSAStartup \n" << WSAGetLastError();
		return 1;
	}

	SOCKET mysocket;
	if ((mysocket=socket(AF_INET, SOCK_STREAM, 0)) < 0) {
		cout << "Error socket \n" << WSAGetLastError();
		WSACleanup();
		return -1;
	}

	sockaddr_in local_addr;
	local_addr.sin_addr.s_addr = 0;
	local_addr.sin_family = AF_INET;
	local_addr.sin_port = htons(MY_PORT);
	if (bind(mysocket, (sockaddr*)&local_addr, sizeof(local_addr))) {
		cout << "Error bind \n" << WSAGetLastError();
		closesocket(mysocket);
		WSACleanup();
		return -1;
	}

	if (listen(mysocket, 0x100)) {
		cout << "Error listen \n" << WSAGetLastError();
		closesocket(mysocket);
		WSACleanup();
		return -1;
	}

	cout << "Waiting connections\n";
	SOCKET client_socket;
	sockaddr_in client_addr;
	int client_addr_size = sizeof(client_addr);

	while ((client_socket = accept(mysocket, (sockaddr*)&client_addr, &client_addr_size))) {
		nclients++;
		HOSTENT* hst;
		hst = gethostbyaddr((char*)&client_addr.sin_addr.s_addr, 4, AF_INET);
		cout << "+new connect!\n";
		if (hst) cout << hst->h_name;
		else cout << "";
		cout << inet_ntoa(client_addr.sin_addr);
		PRINTNUSERS
		cout << endl;
		DWORD thID;
		CreateThread(NULL, NULL, ConToClient, &client_socket, NULL, &thID);
	}
	return 0;
}

DWORD WINAPI ConToClient(LPVOID client_socket) {
	SOCKET my_sock;
	int len;
	my_sock = ((SOCKET*)client_socket)[0];
	char buff[1024];
	char sHELLO[] = "Hello,Student \r\n";
	send(my_sock, sHELLO, sizeof(sHELLO), 0);

	while (SOCKET_ERROR != (len = recv(my_sock, (char*)&buff[0], 1024, 0))) {
		buff[len] = '\0';
		cout << "received: " << buff << endl;
		send(my_sock, buff, len, 0);
	}
	nclients--;
	cout << "-disconnect\n";
	PRINTNUSERS
		closesocket(my_sock);
	return 0;
}



#include <iostream>  
#define _WINSOCK_DEPRECATED_NO_WARNINGS  
#include <winsock2.h> 
#include <string>
#include <windows.h>
#pragma comment (lib, "Ws2_32.lib")
#pragma warning(disable: 4996) 
using namespace std;
#define SRV_HOST "localhost"  
#define SRV_PORT 666
#define CLNT_PORT 1235  
#define BUF_SIZE 64  
char TXT_ANSW[] = "I am your student\n";
int main() {
	char buff[1024];
	if (WSAStartup(0x0202, (WSADATA*)&buff[0])) {
		cout << "Error WSAStartup \n" << WSAGetLastError();  // Ошибка!
		return -1;
	}
	SOCKET s;
	int from_len;   char buf[BUF_SIZE] = { 0 };    hostent* hp;
	sockaddr_in clnt_sin, srv_sin;
	s = socket(AF_INET, SOCK_STREAM, 0);
	clnt_sin.sin_family = AF_INET;
	clnt_sin.sin_addr.s_addr = 0;
	clnt_sin.sin_port = htons(CLNT_PORT);
	bind(s, (sockaddr*)&clnt_sin, sizeof(clnt_sin));
	hp = gethostbyname(SRV_HOST);
	srv_sin.sin_port = htons(SRV_PORT);
	srv_sin.sin_family = AF_INET;
	((unsigned long*)&srv_sin.sin_addr)[0] =
		((unsigned long**)hp->h_addr_list)[0][0];
	connect(s, (sockaddr*)&srv_sin, sizeof(srv_sin));
	string mst;
	do {
		from_len = recv(s, (char*)&buf, BUF_SIZE, 0);
		buf[from_len] = 0;
		cout << buf << endl;
		//send (s, (char *)&TXT_ANSW, sizeof(TXT_ANSW),0); 
		getline(cin, mst);
		int msg_size = mst.size();
		send(s, (char*)&mst[0], msg_size, 0);
	} while (mst != "Bye");
	cout << "exit to infinity" << endl;
	cin.get();    closesocket(s);
	return 0;
}



